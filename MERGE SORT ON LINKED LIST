Node *merge(Node *head1,Node *head2){

    if(!head1||!head2) return NULL;

    if(head1&&!head2) return head1;

    if(!head1&&head2) return head2;

       Node *head=NULL;
       Node *tail=NULL;


       if(head1->data>head2->data) {
           head=head2;
            tail=head2;
           head2=head2->next;
       }
   
      else{
          head=head1;
          tail=head1;
          head1=head1->next;
      }

      while(head1!=NULL&&head2!=NULL){

         if(head1->data<head2->data){
           
              tail->next=head1;
                tail=head1;

           head1=head1->next;

         }

         else{

      tail->next=head2;
      tail=head2;
      head2=head2->next;


         }


}

      if (head1)
          tail->next = head1;

      if (head2)
          tail->next = head2;

      return head;
}


Node *findMid(Node *head){

    if(!head || head->next==NULL) return head;
  
      Node *slow=head;
      Node *fast=head;

      while(fast->next!=NULL&&fast->next->next!=NULL){
          slow=slow->next;
          fast=fast->next->next;
      }

  return slow;
}


Node *mergeSort(Node *head){

    if(head==NULL||head->next==NULL) return head;


     Node *mid=findMid(head);

        // cout<<mid->data<<endl;

       Node *left=head;
       Node *right=mid->next;

        mid->next=NULL;

        left=mergeSort(left);
        right=mergeSort(right); 

        Node *ans=merge(left,right);

        return ans;
}
