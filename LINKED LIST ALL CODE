class Node {
	public :
	int data;
	Node *next;

	Node(int data) {
		this -> data = data;
		next = NULL;
	}
};

//TAKE INPUT FUNCTION IN LL

#include <iostream>
using namespace std;
#include "Node.cpp"

Node* takeInpu_Better() {
	int data;
	cin >> data;
	Node *head = NULL;
	Node *tail = NULL;
	while(data != -1) {
		Node *newNode = new Node(data);
		if(head == NULL) {
			head = newNode;
			tail = newNode;
		}
		else {
			tail -> next = newNode;
			tail = tail -> next;
			
		}

		cin >> data;
	}
	return head;
}

//PRINT THE LINKED LIST

void print(Node *head) {
	while(head != NULL) {
		cout << head -> data << " ";
		head = head -> next;
	}
}

// MAIN FUNCTION

int main() {

	Node *head = takeInpu_Better();
	   print(head);
	
	/*
	// Statically
  
	Node n1(1);
  
	Node *head = &n1;

	Node n2(2);
	Node n3(3);
	Node n4(4);
	Node n5(5);

	n1.next = &n2;
	n2.next = &n3;
	n3.next = &n4;
	n4.next = &n5;

	print(head);
	*/
  
  
	/*
	// Dynamically
  
	Node *n3 = new Node(10);
	   Node *head = n3;
	
	Node *n4 = new Node(20);
	   n3 -> next = n4;
     
     print(head);

	*/

}


// LENGTH OF LINKED LIST

For a given singly linked list of integers, find and return its length. Do it using an iterative method.

Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First and the only line of each test case or query contains elements of the singly linked list separated by a single space.

 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.

Output format :
For each test case, print the length of the linked list.

Output for every test case will be printed in a separate line.

 Constraints :
1 <= t <= 10^2
0 <= N <= 10^5

Time Limit: 1 sec

Sample Input 1 :
1
3 4 5 2 6 1 9 -1
Sample Output 1 :
7

Sample Input 2 :
2
10 76 39 -3 2 9 -23 9 -1
-1
Sample Output 2 :
8
0



int length(Node *head)
{
    
   Node *temp=head;
    
    int count=0;
    
    while(temp!=NULL){

        count++;
        
        temp=temp->next;
    }
    
    return count;
}




//PRINT Ith NODE:


For a given a singly linked list of integers and a position 'i', print the node data at the 'i-th' position.

 Note :
 
Assume that the Indexing for the singly linked list always starts from 0.

If the given position 'i',  is greater than the length of the given singly linked list, then don't print anything.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space.

The second line contains the value of 'i'. It denotes the position in the given singly linked list.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Output format :
For each test case, print the node data at the 'i-th' position of the linked list(if exists).

Output for every test case will be printed in a seperate line.

 Constraints :
1 <= t <= 10^2
0 <= N <= 10^5
i  >= 0
Time Limit: 1sec

Sample Input 1 :
1
3 4 5 2 6 1 9 -1
3
Sample Output 1 :
2

Sample Input 2 :
2
3 4 5 2 6 1 9 -1
0
9 8 4 0 7 8 -1
3
Sample Output 2 :
3
0

void printIthNode(Node *head, int i)
{
    
   Node *temp=head;

       int count=0;
    
    while(count!=i&&temp!=NULL){
        temp=temp->next;
        count++;

    }
    
    if(temp==NULL){
        return;
    }
    
    else{
     cout<<temp->data<<endl;
    }
    
    
}


// DELETE NODE AT ITH POSITION

You have been given a linked list of integers. Your task is to write a function that deletes a node from a given position, 'POS'.

Note :
Assume that the Indexing for the linked list always starts from 0.

If the position is greater than or equal to the length of the linked list, you should return the same linked list without any change.



Input format :
The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the linked list separated by a single space. 

The second line of each test case contains the integer value of 'POS'. It denotes the position in the linked list from where the node has to be deleted.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the resulting linked list of integers in a row, separated by a single space.

Output for every test case will be printed in a separate line.

Note:
You are not required to print the output, it has already been taken care of. Just implement the function. 
Constraints :
1 <= T <= 10^2
0 <= N <= 10^5
POS >= 0

Time Limit: 1sec
Sample Input 1 :
1 
3 4 5 2 6 1 9 -1
3
Sample Output 1 :
3 4 5 6 1 9
Sample Input 2 :
2
3 4 5 2 6 1 9 -1
0
10 20 30 40 50 60 -1
7
Sample Output 2 :
4 5 2 6 1 9
10 20 30 40 50 60

Node *deleteNode(Node *head, int pos)
{
    
    if(head==NULL){
        return head;
    }
    
    if(pos==0){
        head=head->next;
        return head;
    }
    
    
    Node *curr=head;
    Node *prev=NULL;
    
       int i=0;
    
    while(i!=pos&&curr!=NULL){
        prev=curr;
        curr=curr->next;
        i++;
    }
    
    
    if(curr==NULL){
        return head;
    }
    
    prev->next=curr->next;
    
    return head;
    
   
}



//LENGTH OF LINKED LIST RECURISIVELY

Given a linked list, find and return the length of the given linked list recursively.

Sample Input 1:
1 
3 4 5 2 6 1 9 -1
Sample Output 1:
7

int length(Node *head) {
    
  if(head==NULL){
   return 0;
  }
    
    int ans=1+length(head->next);
    
    return ans;
}


//INSERT NODE RECURSIVELY

You have been given a linked list of integers. Your task is to write a function that inserts a node at a given position, 'pos'.

Note:
Assume that the Indexing for the linked list always starts from 0.

If the given position 'pos' is greater than length of linked list, then you should return the same linked list without any change. And if position 'pos' is equal to length of input linked list, then insert the node at the last position.

Sample Input 1:
1
3 4 5 2 6 1 9 -1
3 100
Sample Output 1:
3 4 5 100 2 6 1 9

Sample Input 2:
1 
3 4 5 2 6 1 9 -1
0 20



Node* insertNode(Node *head, int i, int data) {
	
    if(head == NULL){
        return head;
          }

    if(i==0){
        Node *newnode=new Node(data);
        newnode->next=head;
        return newnode;
              }
    
    Node *newhead=insertNode(head->next,i-1,data);

    head->next=newhead;

    return head;
     
}



//DELETE NODE RECURSIVELY

Given a singly linked list of integers and position 'i', delete the node present at the 'i-th' position in the linked list recursively.

 Note :
Assume that the Indexing for the linked list always starts from 0.

No need to print the list, it has already been taken care. Only return the new head to the list.

Sample Input 1 :
1
3 4 5 2 6 1 9 -1
3
Sample Output 1 :
3 4 5 6 1 9

Sample Input 2 :
2
30 -1
0
10 20 30 50 60 -1
4
Sample Output 2 :
10 20 30 50 



Node *deleteNodeRec(Node *head, int pos) {
    
    
	if(head==NULL){
        return head;
   }
    
    if(pos==0){
        return head->next;
         }
    
    
    Node *newhead=deleteNodeRec(head->next,pos-1);
    
    head->next=newhead;
}



//FIND A NODE IN A LINKED LIST

You have been given a singly linked list of integers. Write a function that returns the index/position of integer data denoted by 'N' (if it exists). Return -1 otherwise.
Note :
Assume that the Indexing for the singly linked list always starts from 0.


Sample Input 1 :
2
3 4 5 2 6 1 9 -1
5
10 20 30 40 50 60 70 -1
6
Sample Output 1 :
2
-1

 Explanation for Sample Output 1:
In test case 1, 'N' = 5 appears at position 2 (0-based indexing) in the given linked list.

In test case 2, we can see that 'N' = 6 is not present in the given linked list.

Sample Input 2 :
2
1 -1
2
3 4 5 2 6 1 9 -1
6

Sample Output 2 :
-1
4

 Explanation for Sample Output 2:
In test case 1, we can see that 'N' = 2 is not present in the given linked list.

In test case 2, 'N' = 6 appears at position 4 (0-based indexing) in the given linked list.


int findNode(Node *head, int n){
   
    if(head==NULL){
        return -1;
     }
    
    Node *temp=head;
    
      int i=0;
    
    while(temp->data!=n){
        
        if(temp->next==NULL){
            return -1;
        }
        
        temp=temp->next;
        i++;
    }
    
 
    
 
    return i;
    
    
}


//APPEND LAST N TO FIRST

You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space. 

The second line contains the integer value 'N'. It denotes the number of nodes to be moved from last to the front of the singly linked list.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Output format :
For each test case/query, print the resulting singly linked list of integers in a row, separated by a single space.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
0 <= N < M
Time Limit: 1sec

Where 'M' is the size of the singly linked list.

Sample Input 1 :
2
1 2 3 4 5 -1
3
10 20 30 40 50 60 -1
5

Sample Output 1 :
3 4 5 1 2
20 30 40 50 60 10

Sample Input 2 :
1
10 6 77 90 61 67 100 -1
4
Sample Output 2 :
90 61 67 100 10 6 77 

 Explanation to Sample Input 2 :
We have been required to move the last 4 nodes to the front of the list. Here, "90->61->67->100" is the list which represents the last 4 nodes. When we move this list to the front then the remaining part of the initial list which is, "10->6->77" is attached after 100. Hence, the new list formed with an updated head pointing to 90.


int length(Node *head){

    int count=0;

    Node *temp=head;

    while(temp!=NULL){
        count++;
        temp=temp->next;
       }

    return count;
}



Node *appendLastNToFirst(Node *head, int n){

    if(n==0){
        return head;
     }

       if(head==NULL||head->next==NULL){
         return head; 
         }
    
    
    int size=length(head);


    Node *temp=head;
    Node *prev=NULL;

    int i=0;

    while(i<size-n){
        prev=temp;
        temp=temp->next;
        i++;
    }

    Node *newhead=temp;
    
    while(temp->next!=NULL){
        temp=temp->next;
          }


    temp->next=head;
    prev->next =NULL;
    
    return newhead;
    
}


//ELIMINATE DUPLICATE FROM LINKED LIST

You have been given a singly linked list of integers where the elements are sorted in ascending order. Write a function that removes the consecutive duplicate values such that the given list only contains unique elements and returns the head to the updated list.
 Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first and the only line of each test case or query contains the elements(in ascending order) of the singly linked list separated by a single space.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
 Output format :
For each test case/query, print the resulting singly linked list of integers in a row, separated by a single space.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Time Limit: 1sec

Where 'M' is the size of the singly linked list.
Sample Input 1 :
1
1 2 3 3 3 3 4 4 4 5 5 7 -1
Sample Output 1 :
1 2 3 4 5 7 

Sample Input 2 :
2
10 20 30 40 50 -1
10 10 10 10 -1
Sample Output 2 :
10 20 30 40 50
10

Node *removeDuplicates(Node *head)
{

    if(head->next==NULL){
        return head;
     }


   


    Node *ans=removeDuplicates(head->next);

    if(head->data==ans->data){
        return ans;
      }


    else{
        head->next=ans;
        return head;
     }

    
}


//PRINT REVERSE LINKED LIST

You have been given a singly linked list of integers. Write a function to print the list in a reverse order.

To explain it further, you need to start printing the data from the tail and move towards the head of the list, printing the head data at the end.

Sample Input 1 :
1
1 2 3 4 5 -1
Sample Output 1 :
5 4 3 2 1

Sample Input 2 :
2
1 2 3 -1
10 20 30 40 50 -1
Sample Output 2 :
3 2 1
50 40 30 20 10


void printReverse(Node *head)
{

if(head==NULL){
    return;
}

    printReverse(head->next);
    
    cout<<head->data<<" ";
    
}


//MID POINT OF LINKED LIST (USING SLOW AND FAST POINTERS)

For a given singly linked list of integers, find and return the node present at the middle of the list.


Sample Input 1 :
1
1 2 3 4 5 -1
Sample Output 1 :
3

Sample Input 2 :
2 
-1
1 2 3 4 -1
Sample Output 2 :
2


Node *midPoint(Node *head)
{

    if(head==NULL){
        return NULL;
     }

    if(head->next==NULL){
        return head;
    }


 Node *slow=head;
 Node *fast=head->next;

    while(fast!=NULL&&fast->next!=NULL){ 
        
        slow=slow->next;
        fast=fast->next->next;
        
      }

    return slow;
}


//MERGE TWO SORTED LINKED LIST

You have been given two sorted(in ascending order) singly linked lists of integers.
Write a function to merge them in such a way that the resulting singly linked list is also sorted(in ascending order) and return the new head to the list.
Note :
Try solving this in O(1) auxiliary space.

No need to print the list, it has already been taken care.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the first sorted singly linked list separated by a single space. 

The second line of the input contains the elements of the second sorted singly linked list separated by a single space. 
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output :
For each test case/query, print the resulting sorted singly linked list, separated by a single space.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t = 10^2
0 <= N <= 10 ^ 4
0 <= M <= 10 ^ 4
Where N and M denote the sizes of the singly linked lists. 

Time Limit: 1sec

Sample Input 1 :
1
2 5 8 12 -1
3 6 9 -1
Sample Output 1 :
2 3 5 6 8 9 12 

Sample Input 2 :
2
2 5 8 12 -1
3 6 9 -1
10 40 60 60 80 -1
10 20 30 40 50 60 90 100 -1
Sample Output 2 :
2 3 5 6 8 9 12 
10 10 20 30 40 40 50 60 60 60 80 90 100


Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2)
{
    if(head1==NULL&&head2==NULL){
        return NULL;
       }

    if(head1==NULL){
        return head2;
        }

   if(head2==NULL){
    return head1;
     }

    
    
    Node *fh=NULL;
    Node *ft=NULL;
    	
    if(head1->data<head2->data){
        fh=head1;
        ft=head1;
        head1=head1->next;
      }

    else{
        fh=head2;
        ft=head2;
        head2=head2->next;
      }
    
    while(head1!=NULL&&head2!=NULL){

        if(head1->data<head2->data){

            ft->next=head1;
            ft=head1;
            head1=head1->next;
            
          }

        else{
            ft->next=head2;
            ft=head2;
            head2=head2->next;
           }
        
        
        
}

    if(head2==NULL){
        ft->next=head1;
     }

    else{
        ft->next=head2;
     }


    return fh;
}


//MERGE SORT ON LINKED LIST

 Given a singly linked list of integers, sort it using 'Merge Sort.'
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the sorted singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit: 1sec

Sample Input 1 :
1
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 
Sample Output 2 :
2
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 


Node *merge(Node *head1,Node *head2){
    if(head1==NULL&&head2==NULL){
        return NULL;
    }
    if(head1==NULL){
        return head2;
    }
	if(head2==NULL){
    	return head1;
    }
    Node *fh=NULL;
    Node *ft=NULL;
    	
    if(head1->data<head2->data){
        fh=head1;
        ft=head1;
        head1=head1->next;
	}
    else{
        fh=head2;
        ft=head2;
        head2=head2->next;
    }
    while(head1!=NULL&&head2!=NULL){
        if(head1->data<head2->data){
            ft->next=head1;
            ft=head1;
            head1=head1->next;
          }
        else{
            ft->next=head2;
            ft=head2;
            head2=head2->next;
           }
        }
    	if(head2==NULL){
        	ft->next=head1;
        }
    	else{
        	ft->next=head2;
    	}
    	return fh;
}

Node *findmid(Node *head){
    Node *slow=head;
    Node *fast=head->next;
    while(fast->next != NULL and fast->next->next != NULL){
        slow=slow->next;
        fast=fast->next->next;
	}
    return slow;
}

Node *mergeSort(Node *head)
{
    if(head==NULL){
        return NULL;
	}
    if(head->next==NULL){
        return head;
	}
   	Node *mid=findmid(head);
    Node *left=head;
    Node *right=mid->next;
    
    mid->next=NULL;
   	left= mergeSort(left);
   	right= mergeSort(right);
 	Node *res= merge(left,right);
    return res;
}


//REVERSE LINKED LIST RECURSIVELY

Given a singly linked list of integers, reverse it using recursion and return the head to the modified list. You have to do this in O(N) time complexity where N is the size of the linked list.
 Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a seperate line.
 Constraints :
1 <= t <= 10^2
0 <= M <= 10^4
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
1
1 2 3 4 5 6 7 8 -1
Sample Output 1 :
8 7 6 5 4 3 2 1
Sample Input 2 :
2
10 -1
10 20 30 40 50 -1
Sample Output 2 :
10 
50 40 30 20 10 


Node *reverseLinkedListRec(Node *head)
{

   if(!head) return NULL;

    if(head->next==NULL){
        return head;
     }
   
     Node *newHead=reverseLinkedListRec(head->next);
           
        Node *temp=head->next;
          
        temp->next=head;
    
         head->next=NULL;


        return newHead;   
}


//REVERSE LINKED LIST ITREATIVE

Given a singly linked list of integers, reverse it iteratively and return the head to the modified list.


Node *reverseLinkedList(Node *head) {

    if(head==NULL||head->next==NULL){
        return head;
    }

    Node *p=NULL;
    Node *c=head;
    Node *n=head->next;
    
    while(1){

    c->next=p;
        p=c;
        c=n;

        if(c==NULL){
           break; 
        }

    n=n->next;
    }
    
    return p;
    
}


//FIND A NODE IN LINKED LIST RECURSIVELY

Given a singly linked list of integers and an integer n, find and return the index for the first occurrence of 'n' in the linked list. -1 otherwise.
Follow a recursive approach to solve this.
Note :
Assume that the Indexing for the linked list always starts from 0.
 Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space.

The second line of input contains a single integer depicting the value of 'n'.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
 Output format :
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a seperate line.
 Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit:  1sec
Sample Input 1 :
1
3 4 5 2 6 1 9 -1
100
Sample Output 1 :
-1

Sample Input 2 :
2
10 20010 30 400 600 -1
20010
100 200 300 400 9000 -34 -1
-34
Sample Output 2 :
1
5


int findNodeRec(Node *head, int n)
{

   if(head==NULL){
    return -1;
    }

   int ans= findNodeRec(head->next,n);

    if(head->data==n){
        return 0;
     }
    
   else if(ans!=-1){
        return ans+1;
       }

    else if(ans==-1){
          return -1;        
      }
  
}

//EVEN AFTER ODD LINKED LIST(*)

For a given singly linked list of integers, arrange the elements such that all the even numbers are placed after the odd numbers. The relative order of the odd and even terms should remain unchanged.
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format:
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space. 
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format:
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
1
1 4 5 2 -1
Sample Output 1 :
1 5 4 2 

Sample Input 2 :
2
1 11 3 6 8 0 9 -1
10 20 30 40 -1
Sample Output 2 :
1 11 3 9 6 8 0
10 20 30 40

Node *evenAfterOdd(Node *head)
{
	
}


//DELETE EVERY N NODES(*)

You have been given a singly linked list of integers along with two integers, 'M,' and 'N.' Traverse the linked list such that you retain the 'M' nodes, then delete the next 'N' nodes. Continue the same until the end of the linked list.
To put it in other words, in the given linked list, you need to delete N nodes after every M nodes.
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space.

The second line of input contains two integer values 'M,' and 'N,' respectively. A single space will separate them.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= P <= 10^5
Where P is the size of the singly linked list.
0 <= M <= 10^5
0 <= N <= 10^5 

Time Limit: 1sec
Sample Input 1 :
1
1 2 3 4 5 6 7 8 -1
2 2
Sample Output 1 :
1 2 5 6
Sample Input 2 :
2
10 20 30 40 50 60 -1
0 1
1 2 3 4 5 6 7 8 -1
2 3
Sample Output 2 :
1 2 6 7
Explanation of Sample Input 2 :
For the first query, we delete one node after every zero elements hence removing all the items of the list. Therefore, nothing got printed.

For the second query, we delete three nodes after every two nodes, resulting in the final list, 1 -> 2 -> 6 -> 7.

Node *skipMdeleteN(Node *head, int M, int N)
{

}


//SWAP TWO NODES OF LINKED LIST

You have been given a singly linked list of integers along with two integers, 'i,' and 'j.' Swap the nodes that are present at the 'i-th' and 'j-th' positions.
Note :
Remember, the nodes themselves must be swapped and not the datas.

No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space.

The second line of input contains two integer values 'i,' and 'j,' respectively. A single space will separate them.
 Remember/consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= i < M
0 <= j < M

Time Limit: 1sec
Sample Input 1 :
1
3 4 5 2 6 1 9 -1
3 4
Sample Output 1 :
3 4 5 6 2 1 9 
 Sample Input 2 :
2
10 20 30 40 -1
1 2
70 80 90 25 65 85 90 -1
0 6
 Sample Output 2 :
10 30 20 40 
90 80 90 25 65 85 70 

Node *swapNodes(Node *head, int n, int m)
{

    if(!head) return NULL;

	Node *first=head;
	Node *second=head;

 

     for(int i=0;i<n;i++){
		 first=first->next;
	 }

	 for(int i=0;i<m;i++){
       second=second->next;
	 }

     int temp=first->data;
     first->data=second->data;
	 second->data=temp;


return head;
}


//K REVERSE

Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list.
 'k' is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of 'k,' then left-out nodes, in the end, should be reversed as well.
Example :
Given this linked list: 1 -> 2 -> 3 -> 4 -> 5

For k = 2, you should return: 2 -> 1 -> 4 -> 3 -> 5

For k = 3, you should return: 3 -> 2 -> 1 -> 5 -> 4
 Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
 Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space.

The second line of input contains a single integer depicting the value of 'k'.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the updated singly linked list.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= k <= M

Time Limit:  1sec
Sample Input 1 :
1
1 2 3 4 5 6 7 8 9 10 -1
4
Sample Output 1 :
4 3 2 1 8 7 6 5 10 9

Sample Input 2 :
2
1 2 3 4 5 -1
0
10 20 30 40 -1
4
Sample Output 2 :
1 2 3 4 5 
40 30 20 10 

Node *kReverse(Node *head, int k)
{
	
}


//BUBBLE SORT ON LINKED LIST

Given a singly linked list of integers, sort it using 'Bubble Sort.'


int length(Node *head) {

    if(head == NULL) {
        return 0;
    }
    
    return 1 + length(head -> next);
}

Node *bubbleSort(Node *head) {
    
    for(int i = 0; length(head) > i; i++) { 

        Node *prev = NULL;
        Node *curr = head;

        while(curr -> next) {
            
            if(curr -> data > curr -> next -> data) {

                if(prev) {
                    Node *temp = curr -> next -> next;
                    curr -> next -> next = curr;
                    prev -> next = curr -> next;
                    curr -> next = temp;
                    prev = prev -> next;
                        } 

                else {
                    head = curr -> next;
                    curr -> next = head -> next;
                    head -> next = curr;
                    prev = head;
                    }

            } 

            else { 
                prev = curr;
                curr = curr -> next;
                  }

        }

    }

    return head;
}


